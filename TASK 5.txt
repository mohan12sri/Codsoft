import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
class Course {
    private String courseCode;
    private String title;
    private String description;
    private String schedule;
    private int maxSlots;
    private int availableSlots;
    public Course(String courseCode, String title, String description, String schedule, int maxSlots) {
        this.courseCode = courseCode;
        this.title = title;
        this.description = description;
        this.schedule = schedule;
        this.maxSlots = maxSlots;
        this.availableSlots = maxSlots;
    }
    public String getCourseCode() {
        return courseCode;
    }
    public String getTitle() {
        return title;
    }
    public String getDescription() {
        return description;
    }
    public String getSchedule() {
        return schedule;
    }
    public int getAvailableSlots() {
        return availableSlots;
    }
    public boolean registerStudent() {
        if (availableSlots > 0) {
            availableSlots--;
            return true;
        }
        return false;
    }
    public boolean dropStudent() {
        if (availableSlots < maxSlots) {
            availableSlots++;
            return true;
        }
        return false;
    }
    @Override
    public String toString() {
        return courseCode + ": " + title + "\nDescription: " + description + "\nSchedule: " + schedule + "\nAvailable Slots: " + availableSlots + "\n";
    }
}
class Student {
    private String studentId;
    private String name;
    private ArrayList<Course> registeredCourses;
    public Student(String studentId, String name) {
        this.studentId = studentId;
        this.name = name;
        this.registeredCourses = new ArrayList<>();
    }
    public String getStudentId() {
        return studentId;
    }
    public String getName() {
        return name;
    }
    public ArrayList<Course> getRegisteredCourses() {
        return registeredCourses;
    }
    public boolean registerCourse(Course course) {
        if (course.registerStudent()) {
            registeredCourses.add(course);
            return true;
        }
        return false;
    }
    public boolean dropCourse(Course course) {
        if (registeredCourses.remove(course)) {
            course.dropStudent();
            return true;
        }
        return false;
    }
}

public class StudentCourseRegistrationSystem {
    private static HashMap<String, Course> courseDatabase = new HashMap<>();
    private static HashMap<String, Student> studentDatabase = new HashMap<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        courseDatabase.put("CS101", new Course("CS101", "Introduction to Computer Science", "Basics of CS", "Mon-Wed 10:00-11:00", 30));
        courseDatabase.put("MATH123", new Course("MATH123", "Calculus I", "Introduction to Calculus", "Tue-Thu 12:00-13:30", 25));
        while (true) {
            System.out.println("\nStudent Course Registration System");
            System.out.println("1. Add Student");
            System.out.println("2. Display Available Courses");
            System.out.println("3. Register for a Course");
            System.out.println("4. Drop a Course");
            System.out.println("5. Display Student Courses");
            System.out.println("6. Exit");
            System.out.print("Choose an option: ");
            int option = scanner.nextInt();
            scanner.nextLine(); 
            switch (option) {
                case 1:
                    addStudent(scanner);
                    break;
                case 2:
                    displayCourses();
                    break;
                case 3:
                    registerCourse(scanner);
                    break;
                case 4:
                    dropCourse(scanner);
                    break;
                case 5:
                    displayStudentCourses(scanner);
                    break;
                case 6:
                    System.out.println("Exiting the system. Goodbye!");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }
    private static void addStudent(Scanner scanner) {
        System.out.print("Enter Student ID: ");
        String studentId = scanner.nextLine();
        System.out.print("Enter Student Name: ");
        String name = scanner.nextLine();
        studentDatabase.put(studentId, new Student(studentId, name));
        System.out.println("Student added successfully.");
    }
    private static void displayCourses() {
        System.out.println("\nAvailable Courses:");
        for (Course course : courseDatabase.values()) {
            System.out.println(course);
        }
    }
    private static void registerCourse(Scanner scanner) {
        System.out.print("Enter Student ID: ");
        String studentId = scanner.nextLine();
        Student student = studentDatabase.get(studentId);
        if (student == null) {
            System.out.println("Student not found.");
            return;
        }
        System.out.print("Enter Course Code: ");
        String courseCode = scanner.nextLine();
        Course course = courseDatabase.get(courseCode);
        if (course == null) {
            System.out.println("Course not found.");
            return;
        }
        if (student.registerCourse(course)) {
            System.out.println("Course registered successfully.");
        } else {
            System.out.println("Failed to register course. No available slots.");
        }
    }

    private static void dropCourse(Scanner scanner) {
        System.out.print("Enter Student ID: ");
        String studentId = scanner.nextLine();
        Student student = studentDatabase.get(studentId);
        if (student == null) {
            System.out.println("Student not found.");
            return;
        }
        System.out.print("Enter Course Code: ");
        String courseCode = scanner.nextLine();
        Course course = courseDatabase.get(courseCode);
        if (course == null) {
            System.out.println("Course not found.");
            return;
        }
        if (student.dropCourse(course)) {
            System.out.println("Course dropped successfully.");
        } else {
            System.out.println("Failed to drop course.");
        }
    }

    private static void displayStudentCourses(Scanner scanner) {
        System.out.print("Enter Student ID: ");
        String studentId = scanner.nextLine();
        Student student = studentDatabase.get(studentId);
        if (student == null) {
            System.out.println("Student not found.");
            return;
        }
        System.out.println("Courses registered by " + student.getName() + ":");
        for (Course course : student.getRegisteredCourses()) {
            System.out.println(course);
        }
    }
}